from vllm import LLM, SamplingParams

tp_size = 1 # Tensor Parallelism
sampling_params = SamplingParams(temperature=0.7, top_p=0.9, max_tokens=4096)
model_name = "/home/pod/shared-nvme/rStar/deepseek-ai/deepseek-coder-6.7b-base-sft"
llm = LLM(model=model_name, trust_remote_code=True, gpu_memory_utilization=0.9, tensor_parallel_size=tp_size, max_model_len=14336)

prompts = [
    'A curious user has approached you with a programming question. Your solution should be detailed and provide a logical, step-by-step approach to the user\'s questions.\n\n<Action 1> Defining Function Structures Using pseudocode. \n<Action 2> Refine part of the pseudocode. Each step should build upon the previous one, transitioning smoothly from coarse to fine, and ensuring clarity and coherence throughout the process.\n<Action 3> Generate python code from the pseudocode,  ensuring that it is correct and adheres to the specified input/output format of the given task. If other packages are used, make sure they contain an import statement.\n\nThe pseudocode should be presented in the format: "[Pseudo Start]<PSEUDOCODE>[Pseudo End]". At the final step, provide a conclusive answer in the format: "The code is: [Code Start]<CODE>[Code End].", where <CODE> is the Python code that solves the problem.\n\nHere are some examples: \n## Question\nCreate a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n\n## Solution\nStep 1: <Action 1> Defining Function Structures Using pseudocode.\\nDefine the `contains_words` function that takes an input string and a list of words as parameters and returns a boolean value indicating if all words are present in the string.\\n[Pseudo Start]\\nFUNCTION contains_words(input_string: String, words: List[String]) -> Boolean\\n    TODO: Loop through each word in the list\\n    TODO: Check if the word is in the input string\\n    TODO: Return True if all words are found, otherwise return False\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 2: <Action 2> Loop Through Each Word.\\nWe will loop through each word in the `words` list to check its presence in the `input_string`.\\n[Pseudo Start]\\nFUNCTION contains_words(input_string: String, words: List[String]) -> Boolean\\n    FOR word IN words DO                                        // Initialize looping through each word\\n        TODO: Check if the word is in the input string\\n    END FOR\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 3: <Action 2> Check Word Presence.\\nWithin the loop, check if the current `word` exists in the `input_string`. If it is not found, return `False`.\\n[Pseudo Start]\\nFUNCTION contains_words(input_string: String, words: List[String]) -> Boolean\\n    FOR word IN words DO\\n        IF word NOT IN input_string THEN                      \\n            RETURN False                                       // Return False if any word is missing\\n        END IF\\n    END FOR\\n    RETURN True                                                // Return True if all words are found\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 4: <Action 3> Generate Python code from the pseudocode.\\nThe code is: [Code Start]\\n```python\\ndef contains_words(input_string, words):\\n    for word in words:\\n        if word not in input_string:\\n            return False\\n    return True\\n\\nprint(contains_words(\'This is a test\', [\'test\', \'this\', \'is\'])) # True\\n```\\n[Code End]\n\n## Question\nGenerate a Python program that adds two then doubles the result.\n\n## Solution\nStep 1: <Action 1> Defining Function Structure Using pseudocode.\\nDefine a function that accepts two numbers and returns the result of adding them and then doubling that sum.\\n[Pseudo Start]\\nFUNCTION double_add(num1: Integer, num2: Integer) -> Integer\\n    TODO: Add num1 and num2\\n    TODO: Double the result of the addition\\n    TODO: Return the final result\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 2: <Action 2> Add Two Numbers.\\nWithin the function, calculate the sum of `num1` and `num2`.\\n[Pseudo Start]\\nFUNCTION double_add(num1: Integer, num2: Integer) -> Integer\\n    DECLARE sum ← num1 + num2                       // Calculate the sum of num1 and num2\\n    TODO: Double the result of the addition\\n    TODO: Return the final result\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 3: <Action 2> Double the Result.\\nDouble the previously calculated sum.\\n[Pseudo Start]\\nFUNCTION double_add(num1: Integer, num2: Integer) -> Integer\\n    DECLARE sum ← num1 + num2\\n    DECLARE result ← sum * 2                         // Double the sum\\n    TODO: Return the final result\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 4: <Action 2> Return the Final Result.\\nReturn the final result from the function.\\n[Pseudo Start]\\nFUNCTION double_add(num1: Integer, num2: Integer) -> Integer\\n    DECLARE sum ← num1 + num2\\n    DECLARE result ← sum * 2\\n    RETURN result                                      // Return the doubled result\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 5: <Action 3> Generate Python code from the pseudocode.\\nThe code is: [Code Start]\\n```python\\ndef double_add(num1, num2): \\n    return (num1 + num2) * 2\\n```\\n[Code End]\n\n## Question\nWrite a Python program to compute the sum of the values of a given dictionary\n\n## Solution\nStep 1: <Action 1> Defining Function Structures Using pseudocode.\\nWe will define a function that computes the sum of the values in a dictionary. The function takes a dictionary as an argument and will return the total sum of its values.\\n[Pseudo Start]\\nFUNCTION dict_sum(input_dict: Dictionary) -> Integer\\n    TODO: Initialize a variable to hold the sum\\n    TODO: Iterate through each key-value pair in the dictionary\\n    TODO: Add each value to the sum\\n    TODO: Return the total sum\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 2: <Action 2> Initialize a Variable for the Sum.\\nWe will create a variable to hold the cumulative sum of the dictionary values before we start iterating through the dictionary.\\n[Pseudo Start]\\nFUNCTION dict_sum(input_dict: Dictionary) -> Integer\\n    DECLARE total_sum ← 0                                       // Variable to hold the sum of values\\n    FOR EACH key, value IN input_dict.items() DO                // Iterate through each key-value pair\\n        TODO: Add logic to accumulate the sum\\n    END FOR\\n    RETURN total_sum                                            // Return the total sum\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 3: <Action 2> Accumulate the Sum.\\nWe will implement the logic to add each value from the dictionary to the `total_sum` variable during iteration.\\n[Pseudo Start]\\nFUNCTION dict_sum(input_dict: Dictionary) -> Integer\\n    DECLARE total_sum ← 0\\n    FOR EACH key, value IN input_dict.items() DO\\n        total_sum ← total_sum + value                         // Accumulate the value into total_sum\\n    END FOR\\n    RETURN total_sum                                          // Return the total sum after the loop\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 4: <Action 3> Generate Python code from the pseudocode.\\nThe code is: [Code Start]\\n```python\\ndef dict_sum(input_dict):\\n    total_sum = 0\\n    for key, value in input_dict.items():\\n        total_sum += value\\n    return total_sum\\n```\\n\n\n## Question\nCreate a Python algorithm to identify the longest word in a sentence.\n\n## Solution\nStep 1: <Action 1> Defining Function Structures Using pseudocode.  \\nWe will define a function that takes a sentence as input and returns the longest word in that sentence.\\n[Pseudo Start]\\nFUNCTION find_longest_word(sentence: String) -> String\\n    TODO: Initialize a variable to store the words\\n    TODO: Initialize a variable for the longest word length\\n    TODO: Loop through the words to find the longest one\\n    TODO: Return the longest word\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 2: <Action 2> Initialize Variables and Split the Sentence.  \\nSplit the sentence into words and initialize the variable to track the longest word and its length.\\n[Pseudo Start]\\nFUNCTION find_longest_word(sentence: String) -> String\\n    DECLARE words ← SPLIT(sentence)                        // Split sentence into words\\n    DECLARE longest_word_length ← 0                       // Initialize longest word length to 0\\n    DECLARE longest_word_str ← \\"\\"                          // Initialize longest word string\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 3: <Action 2> Loop Through the Words.  \\nIterate over each word in the list of words to find the longest one by comparing lengths.\\n[Pseudo Start]\\nFUNCTION find_longest_word(sentence: String) -> String\\n    DECLARE words ← SPLIT(sentence)\\n    DECLARE longest_word_length ← 0\\n    DECLARE longest_word_str ← \\"\\"\\n\\n    FOR each word in words DO                               // Loop through each word\\n        IF LENGTH(word) > longest_word_length THEN         // Check if current word is longer\\n            SET longest_word_length ← LENGTH(word)        // Update the longest word length\\n            SET longest_word_str ← word                   // Update the longest word string\\n        END IF\\n    END FOR\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 4: <Action 2> Return the Longest Word.  \\nReturn the string of the longest word found in the loop.\\n[Pseudo Start]\\nFUNCTION find_longest_word(sentence: String) -> String\\n    DECLARE words ← SPLIT(sentence)\\n    DECLARE longest_word_length ← 0\\n    DECLARE longest_word_str ← \\"\\"\\n\\n    FOR each word in words DO\\n        IF LENGTH(word) > longest_word_length THEN\\n            SET longest_word_length ← LENGTH(word)\\n            SET longest_word_str ← word\\n        END IF\\n    END FOR\\n\\n    RETURN longest_word_str                                   // Return the longest word\\nEND FUNCTION\\n[Pseudo End]\\n\\nStep 5: <Action 3> Generate Python code from the pseudocode.  \\nThe code is: [Code Start]\\n```python\\ndef find_longest_word(sentence):\\n    words = sentence.split()\\n    longest_word_length = 0\\n    longest_word_str = \\"\\"\\n    \\n    for word in words:\\n        if len(word) > longest_word_length:\\n            longest_word_length = len(word)\\n            longest_word_str = word\\n            \\n    return longest_word_str\\n```\\n[Code End]\n\nHere is the Question:\n\n## Question\nWrite a python function to calculate the sum of two numbers.\n\n## Solution\nStep 1:'
]
outputs = llm.generate(prompts, sampling_params)

generated_text = [output.outputs[0].text for output in outputs]
# print(generated_text)

for i, text in enumerate(generated_text, 1):
    print(f"Sample {i}:\n{text}\n")